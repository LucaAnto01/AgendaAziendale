//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.42000
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServerAziendale.SRDBAgendaAziendale {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SRDBAgendaAziendale.IServiceDBAgendaAziendale")]
    public interface IServiceDBAgendaAziendale {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDBAgendaAziendale/TestConnessione", ReplyAction="http://tempuri.org/IServiceDBAgendaAziendale/TestConnessioneResponse")]
        void TestConnessione();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDBAgendaAziendale/TestConnessione", ReplyAction="http://tempuri.org/IServiceDBAgendaAziendale/TestConnessioneResponse")]
        System.Threading.Tasks.Task TestConnessioneAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDBAgendaAziendale/Login", ReplyAction="http://tempuri.org/IServiceDBAgendaAziendale/LoginResponse")]
        bool Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDBAgendaAziendale/Login", ReplyAction="http://tempuri.org/IServiceDBAgendaAziendale/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDBAgendaAziendale/GetInfoLavoratore", ReplyAction="http://tempuri.org/IServiceDBAgendaAziendale/GetInfoLavoratoreResponse")]
        string GetInfoLavoratore(string username, string username_cercato);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDBAgendaAziendale/GetInfoLavoratore", ReplyAction="http://tempuri.org/IServiceDBAgendaAziendale/GetInfoLavoratoreResponse")]
        System.Threading.Tasks.Task<string> GetInfoLavoratoreAsync(string username, string username_cercato);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDBAgendaAziendale/InserisciLavoratore", ReplyAction="http://tempuri.org/IServiceDBAgendaAziendale/InserisciLavoratoreResponse")]
        bool InserisciLavoratore(string username, string username_in, string password, string nome, string cognome, string residenza, string dataNascita, string email, string categoria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDBAgendaAziendale/InserisciLavoratore", ReplyAction="http://tempuri.org/IServiceDBAgendaAziendale/InserisciLavoratoreResponse")]
        System.Threading.Tasks.Task<bool> InserisciLavoratoreAsync(string username, string username_in, string password, string nome, string cognome, string residenza, string dataNascita, string email, string categoria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDBAgendaAziendale/GetElencoLavoratori", ReplyAction="http://tempuri.org/IServiceDBAgendaAziendale/GetElencoLavoratoriResponse")]
        string GetElencoLavoratori(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDBAgendaAziendale/GetElencoLavoratori", ReplyAction="http://tempuri.org/IServiceDBAgendaAziendale/GetElencoLavoratoriResponse")]
        System.Threading.Tasks.Task<string> GetElencoLavoratoriAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDBAgendaAziendale/CreaEvento", ReplyAction="http://tempuri.org/IServiceDBAgendaAziendale/CreaEventoResponse")]
        bool CreaEvento(string username, string nome, string descrizione, string dataInizio, string dataFine, string luogo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDBAgendaAziendale/CreaEvento", ReplyAction="http://tempuri.org/IServiceDBAgendaAziendale/CreaEventoResponse")]
        System.Threading.Tasks.Task<bool> CreaEventoAsync(string username, string nome, string descrizione, string dataInizio, string dataFine, string luogo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDBAgendaAziendale/CreaProgetto", ReplyAction="http://tempuri.org/IServiceDBAgendaAziendale/CreaProgettoResponse")]
        bool CreaProgetto(string username, string nome, string descrizione, string dataInizio, string dataFine, string cliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDBAgendaAziendale/CreaProgetto", ReplyAction="http://tempuri.org/IServiceDBAgendaAziendale/CreaProgettoResponse")]
        System.Threading.Tasks.Task<bool> CreaProgettoAsync(string username, string nome, string descrizione, string dataInizio, string dataFine, string cliente);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceDBAgendaAziendaleChannel : ServerAziendale.SRDBAgendaAziendale.IServiceDBAgendaAziendale, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceDBAgendaAziendaleClient : System.ServiceModel.ClientBase<ServerAziendale.SRDBAgendaAziendale.IServiceDBAgendaAziendale>, ServerAziendale.SRDBAgendaAziendale.IServiceDBAgendaAziendale {
        
        public ServiceDBAgendaAziendaleClient() {
        }
        
        public ServiceDBAgendaAziendaleClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceDBAgendaAziendaleClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceDBAgendaAziendaleClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceDBAgendaAziendaleClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void TestConnessione() {
            base.Channel.TestConnessione();
        }
        
        public System.Threading.Tasks.Task TestConnessioneAsync() {
            return base.Channel.TestConnessioneAsync();
        }
        
        public bool Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public string GetInfoLavoratore(string username, string username_cercato) {
            return base.Channel.GetInfoLavoratore(username, username_cercato);
        }
        
        public System.Threading.Tasks.Task<string> GetInfoLavoratoreAsync(string username, string username_cercato) {
            return base.Channel.GetInfoLavoratoreAsync(username, username_cercato);
        }
        
        public bool InserisciLavoratore(string username, string username_in, string password, string nome, string cognome, string residenza, string dataNascita, string email, string categoria) {
            return base.Channel.InserisciLavoratore(username, username_in, password, nome, cognome, residenza, dataNascita, email, categoria);
        }
        
        public System.Threading.Tasks.Task<bool> InserisciLavoratoreAsync(string username, string username_in, string password, string nome, string cognome, string residenza, string dataNascita, string email, string categoria) {
            return base.Channel.InserisciLavoratoreAsync(username, username_in, password, nome, cognome, residenza, dataNascita, email, categoria);
        }
        
        public string GetElencoLavoratori(string username) {
            return base.Channel.GetElencoLavoratori(username);
        }
        
        public System.Threading.Tasks.Task<string> GetElencoLavoratoriAsync(string username) {
            return base.Channel.GetElencoLavoratoriAsync(username);
        }
        
        public bool CreaEvento(string username, string nome, string descrizione, string dataInizio, string dataFine, string luogo) {
            return base.Channel.CreaEvento(username, nome, descrizione, dataInizio, dataFine, luogo);
        }
        
        public System.Threading.Tasks.Task<bool> CreaEventoAsync(string username, string nome, string descrizione, string dataInizio, string dataFine, string luogo) {
            return base.Channel.CreaEventoAsync(username, nome, descrizione, dataInizio, dataFine, luogo);
        }
        
        public bool CreaProgetto(string username, string nome, string descrizione, string dataInizio, string dataFine, string cliente) {
            return base.Channel.CreaProgetto(username, nome, descrizione, dataInizio, dataFine, cliente);
        }
        
        public System.Threading.Tasks.Task<bool> CreaProgettoAsync(string username, string nome, string descrizione, string dataInizio, string dataFine, string cliente) {
            return base.Channel.CreaProgettoAsync(username, nome, descrizione, dataInizio, dataFine, cliente);
        }
    }
}
